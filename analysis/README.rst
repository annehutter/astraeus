ANALYSIS FOR ASTRAEUS
=====================

Analysis code for the semi-analytical / semi-numerical galaxy evolution and reionization code ASTRAEUS (semi-numerical rAdiative tranSfer coupling of galaxy formaTion and Reionization in n-body dArk mattEr simUlationS)

This code is to analyse the tree output files generated by ASTRAEUS.

Installation
============

Pre-requisities
---------------

Parallel run
````````````

1. MPI library


Download & Build
----------------

The source code of this ``ASTRAEUS`` analysis program is downloaded when cloning the `ASTRAEUS repository <https://github.com/annehutter/astraeus>`__:
::

    $ git clone https://github.com/annehutter/astraeus.git
    $ cd analysis
    $ make

This will download the code and a test case from the github directory and compile the source code.

Common.mk
---------

Adjust the paths of the FFTW libraries if they are not enabled by default or uncomment those lines and remove FFTW flags and links. 

.. role:: red
.. role:: blue

Use the same preprocessor flags as you have used when you ran ``ASTRAEUS``:

1. None
2. :red:` ``WITHMETALS`` `
3. :blue:` ``FIRST`` `

Execution
---------

The analysis can then be run by
::

    $ ./analyse iniFile.ini

``iniFile.ini`` contains the input parameters that are needed for any analysis run. For a different analysis run the code does not need to be recompiled but only the parameter file iniFile.ini to be adapted.

Parameter File
==============

**[Input]**

- ``type`` = *[integer]* same as ``type`` as in ASTRAEUS and should be chosen to be the same
- ``numFiles`` = *[integer]* number of input tree files
- ``inputFile`` = path to ASTRAEUS output tree files; note the code assumes all the trees have the same name and differ just by their suffix ``_i``
- ``boxsize`` =  *[float]* length of the simulation box in h^-1 Mpc
- ``gridsize`` = *[integer]* gridsize of the density fields
- ``analytic`` = *[integer]* identifier whether trees to be analysed are analytic [value: 1] or numerical [value: 0]
- ``mergertreeBinwidthInLog`` = *[float]* logarithmic binwidth in halo mass of the analytic merger trees (only relevant when ``analytic = 1``)
- ``mergertreeEndRedshift`` = *[float]* final redshift of analytic merger trees (only relevant when ``analytic = 1``)
- ``hmfFiles`` = halo mass function at redshift ``mergertreeEndRedshift`` (only relevant when ``analytic = 1``)

**[Cosmology]**

- ``omega_m`` = *[float]* matter density parameter
- ``omega_b`` = *[float]* baryon density parameter
- ``omega_l`` = *[float]* lambda density parameter
- ``hubble_h`` = *[float]* Hubble constant H = 100*h km/s/Mpc

**[Simulation]**
- ``doDelayedSNfeedback`` = *[integer]* delayed [value: 1] or instantaneous [value: 0] supernova feedback (same as used in the ASTRAEUS simulation that is analysed)
- ``SNenergyFractionIntoWinds`` = *[float]* supernova energy fraction that drives winds and causes gas ejection from galaxies [typical values: 0.05-0.3] (same as used in the ASTRAEUS simulation that is analysed)
- ``stellarPopulationSynthesisModel`` = stellar population synthesis model identifier which determines the number of ionizing photons; possible options are (suffix 'cont' indicates that star formation is assumed to be constinous across a timestep instead of being a delta function at the time of the snapshot): S99, S99cont, BPASS, BPASScont (same as used in the ASTRAEUS simulation that is analysed)
- ``fesc`` = *[double]* ionizing escape fraction value for CONST model, or normalisation factor for SN model (same as used in the ASTRAEUS simulation that is analysed)
- ``MvirThreshold`` = only galaxies in halos with DM masses larger than ``MvirThreshold`` are analysed when adding to property name ``_MVIRCUT``

**[Grid]**

- ``ionFilename`` = path to ionization field (note the code adds automatically the required suffix that contains the snapshot ``_00i``)
- ``densFilename`` = path to the DM/gas density field (note the code adds automatically the required suffix that contains the snapshot ``_00i``)
- ``velxFilename`` = path to velocity in x direction field (note the code adds automatically the required suffix that contains the snapshot ``_00i``)
- ``velyFilename`` = path to velocity in y direction field (note the code adds automatically the required suffix that contains the snapshot ``_00i``)
- ``velzFilename`` = path to velocity in z direction field (note the code adds automatically the required suffix that contains the snapshot ``_00i``)
- ``ionInputInDoublePrecision`` = *[integer]* identifier whether the ionization field is in single [value: 0] or double [value: 1] precision
- ``densInputInDoublePrecision`` = *[integer]* identifier whether the DM/gas density field is in single [value: 0] or double [value: 1] precision
- ``velInputInDoublePrecision`` = *[integer]* identifier whether the velocity fields are in single [value: 0] or double [value: 1] precision
- ``memoryIntensive`` = *[integer]* identifier whether a memory [value: 1] or a communication [value: 0] intensive method should be used to get grid properties of galaxies
- ``smoothingScale`` = *[float]* scale in h^-1 Mpc on which the grid is smoothed when adding ``smooth`` to property name

**[Analysis]**

- ``numOutputRedshifts`` = *[integer]* number of redshifts for which analysis should be done
- ``outputRedshifts`` = *[list of floats]* redshifts at which analysis should be run [example: 10. 9. 8. 7. 6. 5.]

**[2dHistogram]** *This option computes the average history (time evolution) of a galaxy property as a function of two chosen galaxy properties (hereafter: binned properties)*

- ``num_2D_history`` = *[integer]* number of 2D histograms to compute or the length of the lists below
- ``property_2D_history`` = *[list of properties]* property whose redshift evolution (history) should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty1_2D_history`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_2D_history`` = *[list of properties]* second binned property across which to bin property
- ``binsInLog1_2D_history`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_2D_history`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_2D_history`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_2D_history`` = *[list of integers]* number of bins per magnitude when binning the second binned property

**[1dHistogram]** *This option computes the average history (time evolution) of a galaxy property as a function of one chosen galaxy property (hereafter: binned property)*

- ``num_1D_history`` = *[integer]* number of 1D histograms to compute or the length of the lists below
- ``property_1D_history`` = *[list of properties]* property whose redshift evolution (history) should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty_1D_history`` = *[list of properties]* binned property across which to bin property
- ``binsInLog_1D_history`` = *[list of integers]* identifier whether binning of the binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag_1D_history`` = *[list of integers]* number of bins per magnitude when binning the binned property

**[2dHistogramHistoryMedian]** *This option computes the median history (time evolution) of a galaxy property as a function of two chosen galaxy properties (hereafter: binned properties)*

- ``num_2D_history_median`` = *[integer]* number of 2D histograms to compute or the length of the lists below
- ``property_2D_history_median`` = *[list of properties]* property whose mean value should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty1_2D_history_median`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_2D_history_median`` = *[list of properties]* second binned property across which to bin property
- ``binsInLog1_2D_history_median`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_2D_history_median`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_2D_history_median`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_2D_history_median`` = *[list of integers]* number of bins per magnitude when binning the second binned property

**[3dHistogramValue]** *This option computes the mean value of a galaxy property as a function of three chosen galaxy properties (hereafter: binned properties)*

- ``num_3D_value`` = *[integer]* number of 3D histograms to compute or the length of the lists below
- ``property_3D_value`` = *[list of properties]* property whose mean value should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty1_3D_mapLowLimit`` = *[list of floats]* lower limit of respective property
- ``binProperty1_3D_mapUpLimit`` = *[list of floats]* upper limit of respective property
- ``binProperty1_3D_value`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_3D_value`` = *[list of properties]* second binned property across which to bin property
- ``binProperty3_3D_value`` = *[list of properties]* third binned property across which to bin property
- ``binsInLog1_3D_value`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_3D_value`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog3_3D_value`` = *[list of integers]* identifier whether binning of the third binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_3D_value`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_3D_value`` = *[list of integers]* number of bins per magnitude when binning the second binned property
- ``binsPerMag3_3D_value`` = *[list of integers]* number of bins per magnitude when binning the third binned property

**[2dHistogramValue]** *This option computes the mean value of a galaxy property as a function of two chosen galaxy properties (hereafter: binned properties)*

- ``num_2D_value`` = *[integer]* number of 2D histograms to compute or the length of the lists below
- ``property_2D_value`` =  *[list of properties]* property whose mean value should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty1_2D_mapLowLimit`` = *[list of floats]* lower limit of respective property
- ``binProperty1_2D_mapUpLimit`` = *[list of floats]* upper limit of respective property
- ``binProperty1_2D_value`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_2D_value`` = *[list of properties]* second binned property across which to bin property
- ``binsInLog1_2D_value`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_2D_value`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_2D_value`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_2D_value`` = *[list of integers]* number of bins per magnitude when binning the first binned property

**[1dHistogramValue]** *This option computes the mean value of a galaxy property as a function of achosen galaxy property (hereafter: binned property)*

- ``num_1D_value`` = *[integer]* number of 1D histograms to compute or the length of the lists below
- ``binProperty1_1D_mapLowLimit`` = *[list of floats]* lower limit of respective property
- ``binProperty1_1D_mapUpLimit`` = *[list of floats]* upper limit of respective property
- ``property_1D_value`` =  *[list of properties]* property whose mean value should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty_1D_value`` = *[list of properties]* binned property across which to bin property
- ``binsInLog_1D_value`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag_1D_value`` = *[list of integers]* number of bins per magnitude when binning the first binned property

**[2dHistogramMedian]** *This option computes the median value of a galaxy property as a function of two chosen galaxy properties (hereafter: binned properties)*

- ``num_2D_median`` = *[integer]* number of 2D histograms to compute or the length of the lists below
- ``property_2D_median`` = *[list of properties]* property whose mean value should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty1_2D_median_mapLowLimit`` = *[list of floats]* lower limit of respective property
- ``binProperty1_2D_median_mapUpLimit`` = *[list of floats]* upper limit of respective property
- ``binProperty1_2D_median`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_2D_median`` = *[list of properties]* second binned property across which to bin property
- ``binsInLog1_2D_median`` = *[list of integers]* identifier whether binning of the first binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_2D_median`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_2D_median`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_2D_median`` = *[list of integers]* number of bins per magnitude when binning the second binned property

**[2dnumDensHistogram]** *This option computes the number density of galaxies as a function of two chosen galaxy properties (hereafter: binned properties)*

- ``num_2D`` = *[integer]* number of 2D number density histograms to compute or the length of the lists below
- ``binProperty1_2D`` = *[list of properties]* first binned property across which to bin property
- ``binProperty2_2D`` = *[list of properties]* second binned property across which to bin property
- ``binsInLog1_2D`` = *[list of integers]* identifier whether binning of the first binned  property is logarithmic [value: 1] or linear [value: 0]
- ``binsInLog2_2D`` = *[list of integers]* identifier whether binning of the second binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag1_2D`` = *[list of integers]* number of bins per magnitude when binning the first binned property
- ``binsPerMag2_2D`` = *[list of integers]* number of bins per magnitude when binning the second binned property

**[1dnumDensHistogram]** *This option computes the number density of galaxies as a function of one chosen galaxy properties (hereafter: binned property)*

- ``num_1D`` = *[integer]* number of 1D number density histograms to compute or the length of the lists below
- ``binProperty_1D`` = *[list of properties]* binned property across which to bin property
- ``binsInLog_1D`` = *[list of integers]* identifier whether binning of the binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag_1D`` = *[list of integers]* number of bins per magnitude when binning the binned property
- ``cumulative`` = *[list of integers]* identifier whether 1D histogram should be cumulative

**[GalaxyPairs]** *This option computes the average history (time evolution) of a galaxy property for galaxy pairs fulfilling two galaxy selection criteria (hereafter: selection properties) and maximum distance*
[GalaxyPairs]
- ``num_galaxyPairs`` = *[integer]* number of galaxy pair statistics
- ``selectionProperty1`` = *[list of properties]* first selection property across which to bin property
- ``minSelectionProperty1`` = *[list of double]* minimum value of first selection property
- ``maxSelectionProperty1`` = *[list of double]* maximum value of first selection property
- ``selectionProperty2`` = *[list of properties]* second selection property across which to bin property
- ``minSelectionProperty2`` = *[list of double]* minimum value of second selection property
- ``maxSelectionProperty2`` = *[list of double]* maximum value of second selection property
- ``maxDistanceInComMpc`` = *[list of doubles]* distance between galaxy pair in comoving Mpc
- ``propertyWithHistory_galaxyPairs`` = *[list of properties]* property whose history should be tracked; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV

**[AnalysisEvolution]** *This option can be enabled to generate the history (time evolution) of a galaxy property as a function of one chosen galaxy property (herafter: binned property). This analysis seems similar to 1dHistogramm, however instead of following the total history of each galaxy at the chosen snapshot (i.e. summing the properties of all progenitors if a galaxy has multiple progenitors), this option reads in galaxies at all snapshots and derives histories*

- ``trackEvolution`` = *[integer]* identifier whether history across all available snapshots should be calculated [value: 1] or not [value: 0]

**[1dHistogramEvolution]** *This part is only relevant when ``trackEvolution=1``*

- ``num_1D_evolution`` = *[integer]* number of number density histograms to compute or the length of the lists below
- ``property_1D_evolution`` = *[list of properties]* property whose redshift evolution (history) should be obtained; possible options: Mvir, MvirProg, MgasIni, Mgas, fg, fej, Mstar, SFR, MUV, photHI_bg, Nion, fescFej, zreion, DENS, XHI, GRIDMUV
- ``binProperty_1D_evolution`` = *[list of properties]* binned property across which to bin property
- ``binsInLog_1D_evolution`` = *[list of integers]* identifier whether binning of the binned property is logarithmic [value: 1] or linear [value: 0]
- ``binsPerMag_1D_evolution`` = *[list of integers]* number of bins per magnitude when binning the binned property
- ``binsMinValue_1D_evolution`` = *[double]* minimum value of the binning binned property
- ``binsMaxValue_1D_evolution`` = *[double]* maximum value of hte binning binned property

**[Output]**

- ``outputDirectory`` = path for directory where output files are to be written
- ``writeTxtOutputLists`` = *[integer]* identifier whether text files should be written for all galaxies at all snapshots [value: 1] or not [value: 0]
